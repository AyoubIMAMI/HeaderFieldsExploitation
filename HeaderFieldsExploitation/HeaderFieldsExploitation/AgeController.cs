using System.Text.Json;
using System.Text.Json.Serialization;
using System;
using System.Collections.Generic;
using System.Net;
using System.Web.Http;
using static System.Net.WebRequestMethods;
using System.Linq;
using System.Net.Http.Headers;
using System.Net.Http;

namespace OwinSelfhostSample
{
    public class AgeController : ApiController
    {
        // GET api/age
        public string Get()
        {
            List<string> pageUrls = new List<string>() {
            "https://fr.wikipedia.org/wiki/R%C3%A9seau_informatique",
            "https://fr.wikipedia.org/wiki/Ordinateur",
            "https://fr.wikipedia.org/wiki/Routeur",
            "https://fr.wikipedia.org/wiki/Hub_Ethernet"
            };

            List<TimeSpan?> pageAges = new List<TimeSpan?>();

            foreach (string url in pageUrls)
            {
                try
                {
                    HttpResponseMessage response;
                    HttpClient client = new HttpClient();
                    client.BaseAddress = new Uri(url);
                    response = client.GetAsync("").Result;
                    response.EnsureSuccessStatusCode();
                    HttpResponseHeaders header = response.Headers;

                    TimeSpan? age = header.Age;
                    pageAges.Add(age);
                    
                }
                catch (WebException ex)
                {
                    Console.WriteLine($"Error accessing {url}: {ex.Message}");
                }
            }

            // Filtrer les TimeSpan non nuls
            List<TimeSpan> validAges = pageAges.Where(ts => ts.HasValue).Select(ts => ts.Value).ToList();

            if (validAges.Count != 0)
            {

                // Calcul de la moyenne
                double averageTicks = validAges.Select(ts => ts.Ticks).Average();
                TimeSpan averageTimeSpan = TimeSpan.FromTicks((long)averageTicks);

                Console.WriteLine($"La moyenne est : {averageTimeSpan}");

                // Calcul de l'écart type
                double variance = validAges.Select(ts => Math.Pow(ts.Ticks - averageTicks, 2)).Sum() / pageAges.Count;
                double standardDeviationTicks = Math.Sqrt(variance);
                TimeSpan standardDeviationTimeSpan = TimeSpan.FromTicks((long)standardDeviationTicks);

                Console.WriteLine($"L'écart type est : {standardDeviationTimeSpan}");

                return JsonSerializer.Serialize(new
                {
                    sources = pageUrls[0],
                    averageTimeSpan = averageTimeSpan,
                    standardDeviationTimeSpan = standardDeviationTimeSpan
                });
            }
            else return JsonSerializer.Serialize(new
            {
                source = pageUrls[0],
                averageTimeSpan = "no ages found",
                standardDeviationTimeSpan = "same"
            }); ;
        }
    }
}